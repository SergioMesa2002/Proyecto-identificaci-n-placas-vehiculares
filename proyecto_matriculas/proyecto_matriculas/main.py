import tkinter as tk
from importlib import import_module
from tkinter import messagebox, scrolledtext, ttk
from paises.argentina import Argentina
from paises.brasil import Brasil
from paises.colombia import Colombia
from paises.ecuador import Ecuador
from paises.peru import Peru
from paises.Bolivia import Bolivia
from paises.chile import Chile
from paises.Venezuela import Venezuela
from paises.Uruguay import Uruguay
from paises.Paraguay import Paraguay
from paises.argentina import Argentina
from paises.Honduras import Honduras
from paises.ElSalvador import ElSalvador
from paises.Nicaragua import Nicaragua
from paises.Cuba import Cuba
from paises.RepublicaDominicana import RepublicaDominicana
from paises.Panama import Panama
from paises.Guatemala import Guatemala
from paises.CostaRica import CostaRica
from paises.Belice import Belice
# Definici√≥n de colores y estilos
COLORS = {
    'primary': '#1B4F72',  # Azul oscuro para t√≠tulo
    'secondary': '#3498DB',  # Azul secundario
    'accent': '#E74C3C',  # Rojo para alertas
    'background': '#F4D03F',  # Color mostaza para fondo
    'text': '#2C3E50',  # Color texto principal
    'success': '#27AE60'  # Verde para √©xito
}

# Diccionario de banderas por pa√≠s
BANDERAS = {
    'Argentina': 'üá¶üá∑',
    'Brasil': 'üáßüá∑',
    'Colombia': 'üá®üá¥',
    'Ecuador': 'üá™üá®',
    'Per√∫': 'üáµüá™'
}





class MatriculasApp:
    def __init__(self, root):
        self.root = root
        self.root.title("An√°lisis de Matr√≠culas Internacionales")
        self.root.geometry("800x700")  # Un poco m√°s alto para la bandera
        self.root.configure(bg=COLORS['background'])

        # Configurar archivo Excel y pa√≠ses
        archivo_excel_colombia = "PlacasColombia.xlsx"
        self.paises = [
            Colombia(archivo_excel_colombia),
            Argentina(),
            Brasil(),
            Ecuador(),
            Peru(),
            Bolivia (),
            Chile (),
            Venezuela(),
            Uruguay () ,
            Paraguay(),
            Argentina(),
            Honduras(),
            ElSalvador(),
            Nicaragua (),
            Cuba (),
            Panama (),
            CostaRica (),
            RepublicaDominicana(),
             Belice (

             )

        ]

        self.setup_ui()

    def setup_ui(self):
        # Frame principal
        main_frame = tk.Frame(self.root, bg=COLORS['background'])
        main_frame.pack(expand=True, fill='both', padx=20, pady=20)

        # T√≠tulo
        title_label = tk.Label(
            main_frame,
            text="Sistema de An√°lisis de Matr√≠culas",
            font=('Arial', 24, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        title_label.pack(pady=(0, 20))

        # Frame para la bandera
        self.bandera_frame = tk.Frame(main_frame, bg=COLORS['background'])
        self.bandera_frame.pack(pady=10)

        # Frame para entrada
        input_frame = tk.Frame(main_frame, bg=COLORS['background'])
        input_frame.pack(fill='x', padx=50)

        # Etiqueta y entrada de matr√≠cula
        label_matricula = tk.Label(
            input_frame,
            text="Ingrese la matr√≠cula:",
            font=('Arial', 12, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['text']
        )
        label_matricula.pack(pady=(0, 5))

        self.entry_matricula = tk.Entry(
            input_frame,
            font=('Arial', 14),
            width=30,
            justify='center'
        )
        self.entry_matricula.pack(pady=(0, 10))

        # Bot√≥n de an√°lisis
        self.btn_analizar = tk.Button(
            input_frame,
            text="üîç Analizar Matr√≠cula",
            command=self.analizar_matricula,
            bg=COLORS['primary'],
            fg='white',
            font=('Arial', 12, 'bold'),
            relief='raised',
            cursor='hand2',
            padx=20,
            pady=10
        )
        self.btn_analizar.pack(pady=10)

        # √Årea de resultados
        result_frame = tk.Frame(main_frame, bg=COLORS['background'])
        result_frame.pack(fill='both', expand=True, padx=20, pady=(20, 0))

        # T√≠tulo de resultados
        result_label = tk.Label(
            result_frame,
            text="üìã Resultados del An√°lisis",
            font=('Arial', 14, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        result_label.pack(pady=(0, 10))

        # √Årea de texto con scroll
        self.text_resultado = scrolledtext.ScrolledText(
            result_frame,
            width=70,
            height=15,
            font=('Arial', 11),
            bg='white',
            wrap=tk.WORD
        )
        self.text_resultado.pack(fill='both', expand=True)

        # Configurar hover effects
        self.btn_analizar.bind('<Enter>', lambda e: self.btn_analizar.config(
            bg=COLORS['secondary']))
        self.btn_analizar.bind('<Leave>', lambda e: self.btn_analizar.config(
            bg=COLORS['primary']))

    def mostrar_bandera(self, pais):
        # Limpiar el frame de la bandera
        for widget in self.bandera_frame.winfo_children():
            widget.destroy()


    def analizar_matricula(self):
        matricula = self.entry_matricula.get().strip().upper()
        resultados = []

        # Limpiar bandera anterior
        for widget in self.bandera_frame.winfo_children():
            widget.destroy()

        for pais in self.paises:
            valido, partes = pais.validar_matricula(matricula)
            if valido:
                derivacion = []
                if hasattr(pais, "derivar_matricula"):
                    derivacion = pais.derivar_matricula(partes)

                # Mostrar la bandera del pa√≠s
                self.mostrar_bandera(pais.nombre)

                resultado = f"\n=== RESULTADO PARA {pais.nombre.upper()} ===\n\n"
                resultado += f"üöó Matr√≠cula analizada: {matricula}\n"
                resultado += f"üìç Pa√≠s identificado: {pais.nombre}\n"

                # Agregar el tipo de veh√≠culo si est√° disponible
                if "tipo" in partes:
                    resultado += f"üîß Tipo de Veh√≠culo: {partes['tipo']}\n"

                # Informaci√≥n espec√≠fica adicional
                if "region" in partes:
                    resultado += f"üó∫Ô∏è Regi√≥n: {partes['region']}\n"
                if "departamentos" in partes:
                    resultado += f"üìå Departamentos: {partes['departamentos']}\n"
                if "provincia" in partes:
                    resultado += f"üèõÔ∏è Provincia: {partes['provincia']}\n"
                if "departamento" in partes:
                    resultado += f"üè¢ Departamento: {partes['departamento']}\n"
                if "ciudad" in partes:
                    resultado += f"üåÜ Ciudad: {partes['ciudad']}\n"
                if "estado" in partes and partes["estado"] != "No aplica":
                    resultado += f"üó∫Ô∏è Estado: {partes['estado']} (C√≥digo: {partes['codigo_estado']})\n"

                resultado += "\nüìù Derivaci√≥n por la izquierda:\n"
                for paso in derivacion:
                    resultado += f"‚ûú {paso}\n"

                resultado += "\n" + "=" * 50 + "\n"

                resultados.append((pais.nombre, resultado))

        # Mostrar resultados
        self.text_resultado.delete(1.0, tk.END)

        if resultados:
            if len(resultados) > 1:
                self.text_resultado.insert(tk.END, "‚ö†Ô∏è ¬°ATENCI√ìN! La matr√≠cula es v√°lida en m√∫ltiples pa√≠ses:\n")
                for pais, res in resultados:
                    self.text_resultado.insert(tk.END, res)
            else:
                self.text_resultado.insert(tk.END, resultados[0][1])

            self.text_resultado.configure(bg='#E8F8F5')  # Verde suave para √©xito
        else:
            self.text_resultado.configure(bg='#FADBD8')  # Rojo suave para error
            messagebox.showerror("Error", "‚ùå Formato de matr√≠cula inv√°lido o no corresponde a ning√∫n pa√≠s disponible.")


if __name__ == "__main__":
    root = tk.Tk()
    app = MatriculasApp(root)
    root.mainloop()